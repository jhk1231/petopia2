<?xml version="1.0" encoding="UTF-8"?>

<!-- mybatis mapper 프로그램을 쓰겠다 선언하는 구문 -->
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.mapper.member.MemberMapper"><!-- @mapper를 쓰게 되면 mapper가 있는 경로를 써준다. -->
	<!-- xml로 할 때는 내 마음대로 이름 짓기 (예)"Member" -->

	<resultMap id="memberListResult" type="memberVo">
		<result property="no" javaType="INTEGER" column="member_no"
			jdbcType="INTEGER" />
		<result property="email" javaType="String" column="email"
			jdbcType="CHAR" />
		<result property="password" javaType="String" column="password"
			jdbcType="CHAR" />
		<result property="nickname" javaType="String" column="nickname"
			jdbcType="CHAR" />
		<result property="regDate" javaType="String" column="regdate"
			jdbcType="TIMESTAMP" />
		<result property="lastDate" javaType="String" column="lastdate"
			jdbcType="TIMESTAMP" />
		<result property="grade" javaType="INTEGER" column="grade_no"
			jdbcType="SMALLINT" />
		<result property="docs" javaType="INTEGER" column="docs"
			jdbcType="INTEGER" />
		<result property="comms" javaType="INTEGER" column="comms"
			jdbcType="INTEGER" />
		<result property="visits" javaType="INTEGER" column="visits"
			jdbcType="INTEGER" />
		<result property="ban" javaType="String" column="ban"
			jdbcType="TIMESTAMP" />
		<result property="isMember" javaType="INTEGER"
			column="ismember" jdbcType="SMALLINT" />
	</resultMap>
	<!-- <select id="selectMemberList" parameterType="Map" resultType="memberVo" 
		resultMap="memberListResult"> SELECT member_no, email, name, regdate, visits, 
		ban FROM member M RIGHT JOIN grade G2 ON M.grade_no = G.grade_no WHERE email 
		IS NOT NULL ORDER BY member_no ASC, ismember ASC LIMIT #{memberPerPage} OFFSET 
		#{startRow} </select> -->
	<select id="selectMember_byIDPwd" parameterType="String"
		resultMap="memberListResult">
		<!-- SELECT member.member_no, email, nickname -->
		SELECT *
		FROM Member
		WHERE email=#{email} AND password=#{password}
	</select>

	<select id="test" parameterType="int"
		resultMap="memberListResult">
		SELECT member_no, email
		FROM Member
		WHERE member_no = 1
	</select>

	<update id="updateLastDdate" parameterType="int">
		UPDATE Member
		SET
		lastdate = CURRENT_TIMESTAMP
		WHERE member_no = #{no}
	</update>

	<resultMap type="memberVo" id="detailInfoByManager">
		<result property="no" javaType="int" column="member_no"
			jdbcType="INTEGER" />
		<result property="email" javaType="string" column="email"
			jdbcType="VARCHAR" />
		<result property="grade" javaType="string" column="name"
			jdbcType="VARCHAR" />
		<result property="nickname" javaType="string" column="nickname"
			jdbcType="VARCHAR" />
		<result property="regDate" javaType="string" column="regdate"
			jdbcType="DATE" />
		<result property="lastDate" javaType="string" column="lastdate"
			jdbcType="DATE" />
		<result property="docs" javaType="int" column="docs"
			jdbcType="INTEGER" />
		<result property="comms" javaType="int" column="comms"
			jdbcType="INTEGER" />
		<result property="visits" javaType="int" column="visits"
			jdbcType="INTEGER" />
		<result property="ban" javaType="string" column="ban"
			jdbcType="DATE" />
	</resultMap>


	<select id="selectMemberByManager" parameterType="int"
		resultType="memberVo" resultMap="detailInfoByManager">
		SELECT member_no, email, name,
		nickname, regdate, lastdate, M.docs, M.comms, visits, ban
		FROM member M
		RIGHT JOIN grade G
		ON M.grade_no = G.grade_no
		WHERE member_no = #{no}
	</select>
	<update id="updateBan" parameterType="Map">
		UPDATE member
		SET ban =
		DATE_ADD(NOW(), INTERVAL)
		WHERE member_no = #{no}
	</update>
	<update id="updateMemberByForce" parameterType="int">
		UPDATE member
		SET
		ismember = 2
		WHERE member_no = #{no};
	</update>
	<update id="plusMemberDocs" parameterType="int">
		UPDATE member
		SET docs
		= docs + 1
		WHERE member_no = #{no};
	</update>
	<update id="minusMemberDocs" parameterType="int">
		UPDATE member
		SET docs
		= docs - 1
		WHERE member_no = #{no};
	</update>
	<update id="plusMemberComms" parameterType="int">
		UPDATE member
		SET
		comms = comms + 1
		WHERE member_no = #{no};
	</update>
	<update id="minusMemberComms" parameterType="int">
		UPDATE member
		SET
		comms = comms - 1
		WHERE member_no = #{no};
	</update>

	<!-- 회원가입 -->
	<insert id="insertMemberNo"  parameterType="HashMap">
	<!-- ㄴ설명: insert 명령을 만들건데, 이름은 insertMemberNo이고 (내가 지은거),  파라미터값은 HashMap(자바에 원래 있는 타입)이다.-->
		INSERT INTO MemberNo VALUES()
			<!-- ㄴ설명: MemberNo가 Auto Incremental로 설정 되어있어서 VALUES()에 아무값도 안 넣으면 자동으로 값이 들어감(원래는 VALUES() 괄호 안에 값을 넣어야 함 -->
		<selectKey resultType="int"  keyProperty="no" order="AFTER"> 
		<!-- ㄴ설명:  resultType는 MemberNo의 가져오는 자바타입(이쪽으로 넘어왔을 때),  keyProperty는 "no" : "쿼리문결과" 이런 형태를 가지겠다는 의미. -->
		<!-- ㄴ order="AFTER" 설명 :  (위에 있는) INSERT INTO MemberNo VALUES()을 먼저 실행 후, (아래에 있는) SELECT LAST_INSERT_ID()을 실행해라 -->
			SELECT LAST_INSERT_ID()
			<!-- ㄴ설명: 마지막에 insert 된 값을 선택-->
		</selectKey>
	</insert>

	<insert id="insertMember"  parameterType="memberVo">   <!-- parameterType(경로)의 괄호 안에 들어간 건 MemberVO에 있는 @Alias("memberVO")과 이름이 
			일치해야 함 -->
		INSERT INTO Member(member_no, email, password, nickname)
		VALUES (#{no}, #{email}, #{password}, #{nickname}) <!-- #{}안에는 
			MemberVO에서 선언한 변수명과 일치해야 함 -->
	</insert>
	
	<!-- 회원가입 시 이메일 중복확인 -->
	<select id="selectEmail"  parameterType="String"  resultType="String">
		SELECT email
		FROM member
		WHERE email = #{email}
	</select>

</mapper>

